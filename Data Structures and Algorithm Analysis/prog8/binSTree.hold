#ifndef BINSTREE_H
#define BINSTREE_H

#include "binTree.h"
#include "binTreeNode.h"
#include "/home/onyuksel/courses/340/common/340.h"

using namespace std;


template < class T >
class binSTree : public binTree < T > {
public:
binSTree();
void insert( const T& x ); // insert node with value x
bool search ( const T& x ) const; // searches leaf with value x
bool remove ( const T& x ); // removes leaf with value x

private:

binTreeNode<T>* inOrderSearch(binTreeNode<T>*, const T &) const;
void insert( binTreeNode < T >*&, const T& ); // private version of insert
bool search ( binTreeNode < T >*, const T& ) const; // private version of search
void remove ( binTreeNode < T >*&, const T& ); // private version of remove
bool leaf ( binTreeNode < T >* ) const; // checks if node is leaf
binTreeNode<T>* predecessor(binTreeNode<T> *, const T& );

};


template<class T>
binSTree<T>::binSTree():binTree<T>(){}



template<class T>
void binSTree<T>::insert(const T& x)
{

insert(this->root, x);

}


template<class T>
bool binSTree<T>::search(const T& x) const
{

return search(this->root, x);

}

template<class T>
bool binSTree<T>::remove(const T& x)
{

if (search(this->root, x))

	{

	remove(this->root, x);
	return true;

	}

else

	return false;

}


template<class T>
void binSTree<T>::insert(binTreeNode<T> *&bnode, const T&newData)

{

if (bnode == NULL)

	{

	bnode = new binTreeNode<T>(newData);
	bnode->left = NULL;
	bnode->right = NULL;

	}

else

	{

	if ( newData > bnode->data)

		insert(bnode->right, newData);
	
	else if (newData < bnode->data)

		insert(bnode->left, newData);
	

	}

/*if (bnode->data == newData)

	{

	cout << "Error.  Cannot insert value into tree since it already exists";
	exit(-1);

	}
*/
}


template<class T>
bool binSTree<T>::search(binTreeNode<T> *bnode, const T &targetVal) const
{

while(bnode != NULL)

	{

	if(bnode->data == targetVal)

		return true;

	else

		{

		if(targetVal >= bnode->data)

			bnode = bnode->right;

		else if(targetVal <= bnode->data)

			bnode = bnode->left;

	
		else 
			return false;

		}
	}

}

template<class T>
bool binSTree<T>::leaf(binTreeNode<T> *bnode) const
{

if(bnode != NULL)
	
	return bnode->left == NULL && bnode->right == NULL;

else

	return false;

}


template <class T>
void binSTree<T>::remove(binTreeNode<T> *&bnode, const T& targetVal)
{

//Need to consider 3 base cases:
//1) The node to be removed is a leaf
//2) The node to be removed has only one child
//3) the node to be removed has two children

//case 1

if((bnode->data == targetVal) && (leaf(bnode)))

	{
	cout << 1;

	delete bnode;
	bnode = NULL;

	}

//case 2

else if(bnode->data == targetVal && bnode->right == NULL && leaf(bnode->left))

	{
cout << 2;


	binTreeNode<T> *temp = bnode->left;
	bnode->data = temp->data;
	delete temp;
	temp = NULL;

	}

else if(bnode->data == targetVal && bnode->left == NULL && leaf(bnode->right))

	{
cout << 2;

	binTreeNode<T> *temp = bnode->right;
	bnode->data = temp->data;
	delete temp;
	temp = NULL;

	}

else if(bnode->left->data == targetVal && bnode->left->left == NULL && bnode->left->right != NULL)

	{
cout << 2;

	binTreeNode<T>*temp = bnode->left;
	bnode->left = temp->right;
	delete temp;
	temp = NULL;

	}

else if(bnode->left->data == targetVal && bnode->left->right == NULL && bnode->left->left != NULL)

        {
cout << 2;

        binTreeNode<T>*temp = bnode->left;
        bnode->left = temp->left;
        delete temp;
        temp = NULL;

        }

else if(bnode->right->data == targetVal && bnode->right->left == NULL && bnode->right->right != NULL)

        {
cout << 2;

        binTreeNode<T>*temp = bnode->right;
        bnode->right = temp->right;
        delete temp;
        temp = NULL;

        }


else if(bnode->right->data == targetVal && bnode->right->left != NULL && bnode->right->right == NULL)

        {
cout << 2;

        binTreeNode<T>*temp = bnode->right;
        bnode->right = temp->left;
        delete temp;
        temp = NULL;

        }




//case 3

else 

	{

	//Find successor:  do an inorder traversal, as succcessor is the node visited right after it
cout << 3;
	binTreeNode<T>* temp = bnode->right 
	binTreeNode<T>* lag = NULL;
	while(temp->left != NULL)

		{
	
		lag = temp;
		temp = temp->left;

		}

	bnode->data = temp->data;
	if(lag != NULL)

		remove(lag->left, lag->left->data);
	
	else

		remove(lag->right, lag->right->data); 

	}


//for recursiuve case need to traverse tree

else

	{

	cout << "traverse"  << endl;

	if(bnode->data > targetVal)

		remove(bnode->left, targetVal);

	else if(bnode->data < targetVal)

		remove(bnode->right, targetVal);

	}

}

template<class T>
binTreeNode<T>* binSTree<T>::predecessor(binTreeNode<T>* origNode, const T &targData)
{

binTreeNode<T> *lag = origNode;

while(!leaf(origNode))

	{
	
	if(leaf(origNode->left)&&leaf(origNode->right)&&origNode->data < targData)

		{
cout << "found";

		return origNode;
		break;


		}

	else if(origNode->left != NULL)

		{

		if(origNode->right->data > targData && leaf(origNode->left))

			{
 cout << "found";
	
			lag = origNode->left;
			return lag;
			break;
			}

		else if(origNode->right->data > targData && !leaf(origNode->left)||
		   origNode->right == NULL && !leaf(origNode->left))

			origNode = origNode->left;

		}

	else if(origNode->right !=NULL)

		{

		if(origNode->right->data < targData && leaf(origNode->right))
		
			{

 cout << "found";


			lag = origNode->right;
			return lag;
			break;
		
			}
		else if(origNode->right->data < targData && !leaf(origNode->right))

			origNode = origNode->right;

		}

	else if(leaf(origNode->right->left)&& origNode->right->data > targVal)

		return origNode;
		
	cout << "predecessor";		

 	}


}


#endif
